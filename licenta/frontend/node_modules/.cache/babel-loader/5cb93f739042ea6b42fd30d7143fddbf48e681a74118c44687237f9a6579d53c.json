{"ast":null,"code":"import{serverUrl}from'../constants';// bcrypt? btoa?\nexport function login(email,password){return fetch(serverUrl+'/login',{method:'POST',headers:{'Accept':'application/json','Content-Type':'application/json'},body:JSON.stringify({email,password})});}export function register(nameSurname,email,password,confirmedPassword,phoneNumber,pin){return fetch(serverUrl+'/register',{method:'POST',headers:{'Accept':'application/json','Content-Type':'application/json'},body:JSON.stringify({nameSurname,email,password,confirmedPassword,phoneNumber,pin})});}export function resetPassword(email,newPassword,confirmedPassword,phoneNumber,pin){return fetch(serverUrl+'/resetPassword',{method:'PATCH',headers:{'Accept':'application/json','Content-Type':'application/json'},body:JSON.stringify({email,newPassword,confirmedPassword,phoneNumber,pin})});}export async function getUserRoleFromServer(token,setRole,setUserId,setStatus){if(!token){return'';}const res=await fetch(serverUrl,{method:'GET',headers:{'Accept':'application/json','Content-Type':'application/json'},credentials:'include'});const json=await res.json();setRole(json.role);setUserId(json.id);setStatus(json.status);}","map":{"version":3,"names":["serverUrl","login","email","password","fetch","method","headers","body","JSON","stringify","register","nameSurname","confirmedPassword","phoneNumber","pin","resetPassword","newPassword","getUserRoleFromServer","token","setRole","setUserId","setStatus","res","credentials","json","role","id","status"],"sources":["C:/Users/conac/Desktop/OFICIAL/bookstore/frontend/src/api/auth.js"],"sourcesContent":["import { serverUrl } from '../constants'\r\n// bcrypt? btoa?\r\n\r\nexport function login(email, password) {\r\n    return fetch(serverUrl + '/login', {\r\n        method: 'POST',\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n            email,\r\n            password\r\n        })\r\n    })\r\n}\r\n\r\nexport function register(nameSurname, email, password, confirmedPassword, phoneNumber, pin) {\r\n    return fetch(serverUrl + '/register', {\r\n        method: 'POST',\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n            nameSurname,\r\n            email,\r\n            password,\r\n            confirmedPassword,\r\n            phoneNumber,\r\n            pin\r\n        })\r\n    })\r\n}\r\n\r\nexport function resetPassword(email, newPassword, confirmedPassword, phoneNumber, pin) {\r\n    return fetch(serverUrl + '/resetPassword', {\r\n        method: 'PATCH',\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n            email,\r\n            newPassword,\r\n            confirmedPassword,\r\n            phoneNumber,\r\n            pin\r\n        })\r\n    })\r\n}\r\n\r\nexport async function getUserRoleFromServer(token, setRole, setUserId, setStatus) {\r\n    if (!token) {\r\n        return ''\r\n    }\r\n    const res = await fetch(serverUrl, {\r\n        method: 'GET',\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n        },\r\n        credentials: 'include'\r\n    })\r\n    const json = await res.json()\r\n\r\n    setRole(json.role)\r\n    setUserId(json.id)\r\n    setStatus(json.status)\r\n}\r\n"],"mappings":"AAAA,OAASA,SAAS,KAAQ,cAAc,CACxC;AAEA,MAAO,SAAS,CAAAC,KAAKA,CAACC,KAAK,CAAEC,QAAQ,CAAE,CACnC,MAAO,CAAAC,KAAK,CAACJ,SAAS,CAAG,QAAQ,CAAE,CAC/BK,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACL,QAAQ,CAAE,kBAAkB,CAC5B,cAAc,CAAE,kBACpB,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CACjBP,KAAK,CACLC,QACJ,CAAC,CACL,CAAC,CAAC,CACN,CAEA,MAAO,SAAS,CAAAO,QAAQA,CAACC,WAAW,CAAET,KAAK,CAAEC,QAAQ,CAAES,iBAAiB,CAAEC,WAAW,CAAEC,GAAG,CAAE,CACxF,MAAO,CAAAV,KAAK,CAACJ,SAAS,CAAG,WAAW,CAAE,CAClCK,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACL,QAAQ,CAAE,kBAAkB,CAC5B,cAAc,CAAE,kBACpB,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CACjBE,WAAW,CACXT,KAAK,CACLC,QAAQ,CACRS,iBAAiB,CACjBC,WAAW,CACXC,GACJ,CAAC,CACL,CAAC,CAAC,CACN,CAEA,MAAO,SAAS,CAAAC,aAAaA,CAACb,KAAK,CAAEc,WAAW,CAAEJ,iBAAiB,CAAEC,WAAW,CAAEC,GAAG,CAAE,CACnF,MAAO,CAAAV,KAAK,CAACJ,SAAS,CAAG,gBAAgB,CAAE,CACvCK,MAAM,CAAE,OAAO,CACfC,OAAO,CAAE,CACL,QAAQ,CAAE,kBAAkB,CAC5B,cAAc,CAAE,kBACpB,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CACjBP,KAAK,CACLc,WAAW,CACXJ,iBAAiB,CACjBC,WAAW,CACXC,GACJ,CAAC,CACL,CAAC,CAAC,CACN,CAEA,MAAO,eAAe,CAAAG,qBAAqBA,CAACC,KAAK,CAAEC,OAAO,CAAEC,SAAS,CAAEC,SAAS,CAAE,CAC9E,GAAI,CAACH,KAAK,CAAE,CACR,MAAO,EAAE,CACb,CACA,KAAM,CAAAI,GAAG,CAAG,KAAM,CAAAlB,KAAK,CAACJ,SAAS,CAAE,CAC/BK,MAAM,CAAE,KAAK,CACbC,OAAO,CAAE,CACL,QAAQ,CAAE,kBAAkB,CAC5B,cAAc,CAAE,kBACpB,CAAC,CACDiB,WAAW,CAAE,SACjB,CAAC,CAAC,CACF,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAF,GAAG,CAACE,IAAI,CAAC,CAAC,CAE7BL,OAAO,CAACK,IAAI,CAACC,IAAI,CAAC,CAClBL,SAAS,CAACI,IAAI,CAACE,EAAE,CAAC,CAClBL,SAAS,CAACG,IAAI,CAACG,MAAM,CAAC,CAC1B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}