{"ast":null,"code":"import { serverUrl } from '../constants';\n// bcrypt? btoa?\n\nexport function login(email, password) {\n  return fetch(serverUrl + '/login', {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  });\n}\nexport function register(nameSurname, email, password, confirmedPassword, phoneNumber, pin) {\n  return fetch(serverUrl + '/register', {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      nameSurname,\n      email,\n      password,\n      confirmedPassword,\n      phoneNumber,\n      pin\n    })\n  });\n}\nexport function resetPassword(email, newPassword, confirmedPassword, phoneNumber, pin) {\n  return fetch(serverUrl + '/resetPassword', {\n    method: 'PATCH',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email,\n      newPassword,\n      confirmedPassword,\n      phoneNumber,\n      pin\n    })\n  });\n}\nexport async function getUserRoleFromServer(token, setRole, setUserId, setStatus) {\n  if (!token) {\n    return '';\n  }\n  const res = await fetch(serverUrl, {\n    method: 'GET',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    credentials: 'include'\n  });\n  const json = await res.json();\n  setRole(json.role);\n  setUserId(json.id);\n  setStatus(json.status);\n}","map":{"version":3,"names":["serverUrl","login","email","password","fetch","method","headers","body","JSON","stringify","register","nameSurname","confirmedPassword","phoneNumber","pin","resetPassword","newPassword","getUserRoleFromServer","token","setRole","setUserId","setStatus","res","credentials","json","role","id","status"],"sources":["C:/Users/conac/Desktop/OFICIAL/bookstore/frontend/src/api/auth.js"],"sourcesContent":["import { serverUrl } from '../constants'\r\n// bcrypt? btoa?\r\n\r\nexport function login(email, password) {\r\n    return fetch(serverUrl + '/login', {\r\n        method: 'POST',\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n            email,\r\n            password\r\n        })\r\n    })\r\n}\r\n\r\nexport function register(nameSurname, email, password, confirmedPassword, phoneNumber, pin) {\r\n    return fetch(serverUrl + '/register', {\r\n        method: 'POST',\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n            nameSurname,\r\n            email,\r\n            password,\r\n            confirmedPassword,\r\n            phoneNumber,\r\n            pin\r\n        })\r\n    })\r\n}\r\n\r\nexport function resetPassword(email, newPassword, confirmedPassword, phoneNumber, pin) {\r\n    return fetch(serverUrl + '/resetPassword', {\r\n        method: 'PATCH',\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n            email,\r\n            newPassword,\r\n            confirmedPassword,\r\n            phoneNumber,\r\n            pin\r\n        })\r\n    })\r\n}\r\n\r\nexport async function getUserRoleFromServer(token, setRole, setUserId, setStatus) {\r\n    if (!token) {\r\n        return ''\r\n    }\r\n    const res = await fetch(serverUrl, {\r\n        method: 'GET',\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n        },\r\n        credentials: 'include'\r\n    })\r\n    const json = await res.json()\r\n\r\n    setRole(json.role)\r\n    setUserId(json.id)\r\n    setStatus(json.status)\r\n}\r\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,cAAc;AACxC;;AAEA,OAAO,SAASC,KAAKA,CAACC,KAAK,EAAEC,QAAQ,EAAE;EACnC,OAAOC,KAAK,CAACJ,SAAS,GAAG,QAAQ,EAAE;IAC/BK,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACL,QAAQ,EAAE,kBAAkB;MAC5B,cAAc,EAAE;IACpB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACjBP,KAAK;MACLC;IACJ,CAAC;EACL,CAAC,CAAC;AACN;AAEA,OAAO,SAASO,QAAQA,CAACC,WAAW,EAAET,KAAK,EAAEC,QAAQ,EAAES,iBAAiB,EAAEC,WAAW,EAAEC,GAAG,EAAE;EACxF,OAAOV,KAAK,CAACJ,SAAS,GAAG,WAAW,EAAE;IAClCK,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACL,QAAQ,EAAE,kBAAkB;MAC5B,cAAc,EAAE;IACpB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACjBE,WAAW;MACXT,KAAK;MACLC,QAAQ;MACRS,iBAAiB;MACjBC,WAAW;MACXC;IACJ,CAAC;EACL,CAAC,CAAC;AACN;AAEA,OAAO,SAASC,aAAaA,CAACb,KAAK,EAAEc,WAAW,EAAEJ,iBAAiB,EAAEC,WAAW,EAAEC,GAAG,EAAE;EACnF,OAAOV,KAAK,CAACJ,SAAS,GAAG,gBAAgB,EAAE;IACvCK,MAAM,EAAE,OAAO;IACfC,OAAO,EAAE;MACL,QAAQ,EAAE,kBAAkB;MAC5B,cAAc,EAAE;IACpB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACjBP,KAAK;MACLc,WAAW;MACXJ,iBAAiB;MACjBC,WAAW;MACXC;IACJ,CAAC;EACL,CAAC,CAAC;AACN;AAEA,OAAO,eAAeG,qBAAqBA,CAACC,KAAK,EAAEC,OAAO,EAAEC,SAAS,EAAEC,SAAS,EAAE;EAC9E,IAAI,CAACH,KAAK,EAAE;IACR,OAAO,EAAE;EACb;EACA,MAAMI,GAAG,GAAG,MAAMlB,KAAK,CAACJ,SAAS,EAAE;IAC/BK,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACL,QAAQ,EAAE,kBAAkB;MAC5B,cAAc,EAAE;IACpB,CAAC;IACDiB,WAAW,EAAE;EACjB,CAAC,CAAC;EACF,MAAMC,IAAI,GAAG,MAAMF,GAAG,CAACE,IAAI,CAAC,CAAC;EAE7BL,OAAO,CAACK,IAAI,CAACC,IAAI,CAAC;EAClBL,SAAS,CAACI,IAAI,CAACE,EAAE,CAAC;EAClBL,SAAS,CAACG,IAAI,CAACG,MAAM,CAAC;AAC1B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}